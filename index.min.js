var DEBUG, FLAP, GAME_HEIGHT, GRAVITY, GROUND_HEIGHT, GROUND_Y, HEIGHT, OPENING, SCALE, SPAWN_RATE, SPEED, WIDTH, WebFontConfig, bg, bird, deadInvs, deadTubeBottoms, deadTubeTops, fallSnd, flapSnd, floor, gameOver, gameOverText, gameStarted, githubHtml, ground, hurtSnd, instText, invs, main, parent, score, scoreSnd, scoreText, swooshSnd, tubes, tubesTimer;
DEBUG = !1, SPEED = 160, GRAVITY = 1100, FLAP = 320, SPAWN_RATE = 1 / 1200, OPENING = 100, SCALE = 1, HEIGHT = 384, WIDTH = 288, GAME_HEIGHT = 336, GROUND_HEIGHT = 64, GROUND_Y = HEIGHT - GROUND_HEIGHT, parent = document.querySelector("#screen"), gameStarted = void 0, gameOver = void 0, deadTubeTops = [], deadTubeBottoms = [], deadInvs = [], bg = null, tubes = null, invs = null, bird = null, ground = null, score = null, scoreText = null, instText = null, gameOverText = null, flapSnd = null, scoreSnd = null, hurtSnd = null, fallSnd = null, swooshSnd = null, tubesTimer = null, githubHtml = '<iframe src="http://ghbtns.com/github-btn.html?user=hyspace&repo=flappy&type=watch&count=true&size=large"\nallowtransparency="true" frameborder="0" scrolling="0" width="150" height="30"></iframe>', floor = Math.floor, main = function() {
  var e, t, o, r, n, d, i, a, s, l, b, u, c;
  s = function(e, t) {
    var o, n, d;
    return o = null, n = t ? "tubeTop" : "tubeBottom", d = floor(t ? e - OPENING / 2 - 320 : e + OPENING / 2), deadTubeTops.length > 0 && "tubeTop" === n ? (o = deadTubeTops.pop().revive(), o.reset(r.world.width, d)) : deadTubeBottoms.length > 0 && "tubeBottom" === n ? (o = deadTubeBottoms.pop().revive(), o.reset(r.world.width, d)) : (o = tubes.create(r.world.width, d, n), o.body.allowGravity = !1), o.body.velocity.x = -SPEED, o
  }, l = function() {
    var e, t, o, n;
    tubes.forEachAlive(function(e) {
      e.x + e.width < r.world.bounds.left && ("tubeTop" === e.key && deadTubeTops.push(e.kill()), "tubeBottom" === e.key && deadTubeBottoms.push(e.kill()))
    }), invs.forEachAlive(function(e) {
      e.x + e.width < r.world.bounds.left && deadInvs.push(e.kill())
    }), n = r.world.height / 2 + (Math.random() - .5) * r.world.height * .2, e = s(n), o = s(n, !0), deadInvs.length > 0 ? t = deadInvs.pop().revive().reset(o.x + o.width / 2, 0) : (t = invs.create(o.x + o.width / 2, 0), t.width = 2, t.height = r.world.height, t.body.allowGravity = !1), t.body.velocity.x = -SPEED
  }, e = function(e, t) {
    invs.remove(t), score += 1, scoreText.setText(score), scoreSnd.play()
  }, a = function() {
    var e;
    console.log("game over"), gameOver = !0, bird.body.velocity.y > 0 && (bird.body.velocity.y = 100), bird.animations.stop(), bird.frame = 1, instText.setText("TOUCH\nTO TRY AGAIN"), instText.renderable = !0, e = window.localStorage.getItem("hiscore"), e = e ? e : score, e = score > parseInt(e, 10) ? score : e, window.localStorage.setItem("hiscore", e), gameOverText.setText("GAMEOVER\n\nHIGH SCORE\n\n" + e), gameOverText.renderable = !0, tubes.forEachAlive(function(e) {
      e.body.velocity.x = 0
    }), invs.forEach(function(e) {
      e.body.velocity.x = 0
    }), r.time.events.remove(tubesTimer), r.time.events.add(1e3, function() {
      return r.input.onTap.addOnce(function() {
        return i(), swooshSnd.play()
      })
    }), hurtSnd.play()
  }, o = function() {
    var e;
    gameStarted || b(), gameOver || (bird.body.gravity.y = 0, bird.body.velocity.y = -100, e = r.add.tween(bird.body.velocity).to({
      y: -FLAP
    }, 25, Phaser.Easing.Bounce.In, !0), e.onComplete.add(function() {
      return bird.body.gravity.y = GRAVITY
    }), flapSnd.play())
  }, n = function() {
    var e;
    e = {
      spritesheet: {
        bird: ["assets/bird.png", 36, 26]
      },
      image: {
        tubeTop: ["assets/tube1.png"],
        tubeBottom: ["assets/tube2.png"],
        ground: ["assets/ground.png"],
        bg: ["assets/bg.png"]
      },
      audio: {
        flap: ["assets/sfx_wing.mp3"],
        score: ["assets/sfx_point.mp3"],
        hurt: ["assets/sfx_hit.mp3"],
        fall: ["assets/sfx_die.mp3"],
        swoosh: ["assets/sfx_swooshing.mp3"]
      }
    }, Object.keys(e).forEach(function(t) {
      Object.keys(e[t]).forEach(function(o) {
        r.load[t].apply(r.load, [o].concat(e[t][o]))
      })
    })
  }, t = function() {
    var e;
    console.log("%chttps://github.com/hyspace/flappy", "color: black; font-size: x-large"), e = window.innerWidth / window.innerHeight, (e > 1.15 || .7 > e) && (document.querySelector("#github").innerHTML = githubHtml), document.querySelector("#loading").style.display = "none", Phaser.Canvas.setSmoothingEnabled(r.context, !1), r.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL, r.stage.scale.setScreenSize(!0), r.world.width = WIDTH, r.world.height = HEIGHT, bg = r.add.tileSprite(0, 0, WIDTH, HEIGHT, "bg"), tubes = r.add.group(), invs = r.add.group(), bird = r.add.sprite(0, 0, "bird"), bird.anchor.setTo(.5, .5), bird.animations.add("fly", [0, 1, 2], 10, !0), bird.body.collideWorldBounds = !0, bird.body.setPolygon(24, 1, 34, 16, 30, 32, 20, 24, 12, 34, 2, 12, 14, 2), ground = r.add.tileSprite(0, GROUND_Y, WIDTH, GROUND_HEIGHT, "ground"), ground.tileScale.setTo(SCALE, SCALE), scoreText = r.add.text(r.world.width / 2, r.world.height / 4, "", {
      font: '16px "Press Start 2P"',
      fill: "#fff",
      stroke: "#430",
      strokeThickness: 4,
      align: "center"
    }), scoreText.anchor.setTo(.5, .5), instText = r.add.text(r.world.width / 2, r.world.height - r.world.height / 4, "", {
      font: '8px "Press Start 2P"',
      fill: "#fff",
      stroke: "#430",
      strokeThickness: 4,
      align: "center"
    }), instText.anchor.setTo(.5, .5), gameOverText = r.add.text(r.world.width / 2, r.world.height / 2, "", {
      font: '16px "Press Start 2P"',
      fill: "#fff",
      stroke: "#430",
      strokeThickness: 4,
      align: "center"
    }), gameOverText.anchor.setTo(.5, .5), gameOverText.scale.setTo(SCALE, SCALE), flapSnd = r.add.audio("flap"), scoreSnd = r.add.audio("score"), hurtSnd = r.add.audio("hurt"), fallSnd = r.add.audio("fall"), swooshSnd = r.add.audio("swoosh"), r.input.onDown.add(o), i()
  }, i = function() {
    gameStarted = !1, gameOver = !1, score = 0, scoreText.setText("Flappy Bird"), instText.setText("TOUCH TO FLAP\nbird WINGS"), gameOverText.renderable = !1, bird.body.allowGravity = !1, bird.reset(.3 * r.world.width, r.world.height / 2), bird.angle = 0, bird.animations.play("fly"), tubes.removeAll(), invs.removeAll()
  }, b = function() {
    bird.body.allowGravity = !0, bird.body.gravity.y = GRAVITY, tubesTimer = r.time.events.loop(1 / SPAWN_RATE, l), scoreText.setText(score), instText.renderable = !1, gameStarted = !0
  }, c = function() {
    var t;
    gameStarted ? gameOver ? (t = r.add.tween(bird).to({
      angle: 90
    }, 100, Phaser.Easing.Bounce.Out, !0), bird.body.bottom >= GROUND_Y + 3 && (bird.y = GROUND_Y - 13, bird.body.velocity.y = 0, bird.body.allowGravity = !1, bird.body.gravity.y = 0)) : (bird.angle = 90 * (FLAP + bird.body.velocity.y) / FLAP - 180, bird.angle < -30 && (bird.angle = -30), bird.angle > 80 ? (bird.angle = 90, bird.animations.stop(), bird.frame = 1) : bird.animations.play(), r.physics.overlap(bird, tubes, function() {
      return a(), fallSnd.play()
    }), !gameOver && bird.body.bottom >= GROUND_Y && a(), r.physics.overlap(bird, invs, e)) : (bird.y = r.world.height / 2 + 8 * Math.cos(r.time.now / 200), bird.angle = 0), gameOver || (ground.tilePosition.x -= r.time.physicsElapsed * SPEED)
  }, d = function() {
    DEBUG && (r.debug.renderSpriteBody(bird), tubes.forEachAlive(function(e) {
      r.debug.renderSpriteBody(e)
    }), invs.forEach(function(e) {
      r.debug.renderSpriteBody(e)
    }))
  }, u = {
    preload: n,
    create: t,
    update: c,
    render: d
  }, r = new Phaser.Game(WIDTH, HEIGHT, Phaser.CANVAS, parent, u, !1, !1)
}, WebFontConfig = {
  google: {
    families: ["Press+Start+2P::latin"]
  },
  active: main
},
function() {
  var e, t;
  return t = document.createElement("script"), t.src = ("https:" === document.location.protocol ? "https" : "http") + "://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js", t.type = "text/javascript", t.async = "true", e = document.getElementsByTagName("script")[0], e.parentNode.insertBefore(t, e)
}();